#!/usr/bin/env python3

import sys, os
import numpy as np
import pandas as pd
import argparse

def parse() -> argparse.Namespace:
    parser = argparse.ArgumentParser(description="Add the data from the output of Valgrind's massif tool to a pickle file")
    parser.add_argument('massif_output', help='the output file generated by massif')
    return parser.parse_args()

def main() -> None:
    args = parse()

    time = []
    mem_heap = []
    mem_heap_extra = []
    with open(args.massif_output, 'r') as f:
        for line in f.readlines():
            if 'time=' in line:
                time.append(line.split('=')[1].strip())
            elif 'mem_heap_extra' in line:
                mem_heap_extra.append(line.split('=')[1].strip())
            elif 'mem_heap' in line:
                mem_heap.append(line.split('=')[1].strip())

    time = np.array([eval(i) for i in time])
    mem_heap = np.array([eval(i) for i in mem_heap]) + np.array([eval(i) for i in mem_heap_extra])

    system = os.path.basename(os.getcwd())
    dataset = os.path.basename(os.path.abspath(os.path.join(os.getcwd(), os.pardir)))

    try:
        df = pd.read_pickle(f'~/chem/dlpno_testing/pkl/massif_{dataset}.pkl')
        df[f'{system}_time'] = time
        df[f'{system}_heap'] = mem_heap

    except:
        df = pd.DataFrame({f'{system}_time' : time, f'{system}_heap' : mem_heap})

    df.name = dataset
    df.to_pickle(f'~/chem/dlpno_testing/pkl/massif_{dataset}.pkl')
    # df.to_csv(f'~/chem/dlpno_testing/pkl/massif_l7.csv')

if __name__ == "__main__":
    main()
